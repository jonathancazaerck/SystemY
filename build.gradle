/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
    testCompile 'org.junit.platform:junit-platform-runner:1.0.2'
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'

    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'commons-io:commons-io:2.0.1'
    compile 'com.intellij:forms_rt:7.0.3'
}


buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        classpath 'gradle.plugin.edu.sc.seis:macAppBundle:2.1.9'
        classpath 'edu.sc.seis.gradle:launch4j:2.4.2'
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'edu.sc.seis.macAppBundle'
apply plugin: 'edu.sc.seis.launch4j'

macAppBundle {
    mainClassName = 'ds3.NodeMain'
    appName = 'SystemY Node'
    icon = 'res/icon.icns'
    bundleJRE = true
    javaProperties.put('apple.laf.useScreenMenuBar', 'true')
    javaProperties.put('ds3.enableGui', 'true')
}

launch4j {
    outfile = 'SystemY Node.exe'
    productName = 'SystemY Node'
    mainClassName = 'ds3.NodeMain'
    icon = 'res/icon.ico'
}

junitPlatform {
    details 'tree'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

task nodeJarTask(type: Jar) {
    from sourceSets.main.output

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    archiveName = 'node.jar'

    manifest {
        attributes(
                'Main-Class': 'ds3.NodeMain',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}


task nameserverJarTask(type: Jar) {
    from sourceSets.main.output

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    archiveName = 'nameserver.jar'

    manifest {
        attributes(
                'Main-Class': 'ds3.NameServerMain',
                'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}

artifacts {
    archives nameserverJarTask, nodeJarTask
}

test {
    testLogging {
        events = ['failed']
        showStandardStreams = true
        exceptionFormat = 'full'
        showStackTraces = true
    }

    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}
