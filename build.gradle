/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
    testCompile 'org.junit.platform:junit-platform-runner:1.0.2'

    compile 'com.googlecode.json-simple:json-simple:1.1.1'
}


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
    details 'tree'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

task nodeJarTask(type: Jar) {
    from sourceSets.main.output

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    archiveName = 'node.jar'

    manifest {
        attributes(
                "Main-Class": "ds3.NodeMain",
                "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}


task nameserverJarTask(type: Jar) {
    from sourceSets.main.output

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    archiveName = 'nameserver.jar'

    manifest {
        attributes(
                "Main-Class": "ds3.NameServerMain",
                "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}

artifacts {
    archives nameserverJarTask, nodeJarTask
}